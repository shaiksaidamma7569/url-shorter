import hashlib
import random
import string

class URLShortener:
    def __init__(self):
        self.url_map = {}

    # Function to shorten the URL
    def shorten_url(self, long_url):
        # Generate a random 6-character string
        shortened = self.generate_shortened_key()
        
        # Ensure the URL is unique
        while shortened in self.url_map:
            shortened = self.generate_shortened_key()
        
        # Map the shortened key to the long URL
        self.url_map[shortened] = long_url
        return f"short.ly/{shortened}"

    # Function to generate a shortened key
    def generate_shortened_key(self):
        return ''.join(random.choices(string.ascii_letters + string.digits, k=6))

    # Function to retrieve the original URL
    def get_long_url(self, short_url):
        # Extract the key from the short URL
        shortened_key = short_url.split('/')[-1]
        
        # Look up the long URL
        return self.url_map.get(shortened_key, "URL not found!")

# Example usage
if __name__ == "__main__":
    url_shortener = URLShortener()

    # Input long URL
    long_url = input("Enter a long URL to shorten: ")
    
    # Shorten the URL
    short_url = url_shortener.shorten_url(long_url)
    print(f"Shortened URL: {short_url}")

    # Retrieve the long URL
    retrieved_url = url_shortener.get_long_url(short_url)
    print(f"Original URL: {retrieved_url}")
